// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

    
#ifndef MOTOR_H
#define MOTOR_H
#include <stdint.h>
    

typedef enum Motor_EventId
{
    Motor_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    Motor_EventId_LEFT_MOVE = 1,
    Motor_EventId_LEFT_MOVE_MAX = 2,
    Motor_EventId_RIGHT_MOVE = 3,
    Motor_EventId_RIGHT_MOVE_MAX = 4,
    Motor_EventId_STOP = 5
} Motor_EventId;

enum
{
    Motor_EventIdCount = 6
};

typedef enum Motor_StateId
{
    Motor_StateId_ROOT = 0,
    Motor_StateId_LEFT_MOVE = 1,
    Motor_StateId_LEFT_MOVE_MAX = 2,
    Motor_StateId_RIGHT_MOVE = 3,
    Motor_StateId_RIGHT_MOVE_MAX = 4,
    Motor_StateId_STOP = 5
} Motor_StateId;

enum
{
    Motor_StateIdCount = 6
};


// Generated state machine
// forward declaration
typedef struct Motor Motor;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct Motor_Vars
{
    uint32_t state;
    uint32_t step;
    int32_t total_step;
} Motor_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Motor_ctor(Motor* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Motor_start(Motor* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void Motor_dispatch_event(Motor* sm, Motor_EventId event_id);

// Thread safe.
char const * Motor_state_id_to_string(Motor_StateId id);

// Thread safe.
char const * Motor_event_id_to_string(Motor_EventId id);

// Generated state machine
struct Motor
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    Motor_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    Motor_Vars vars;
};

#endif // MOTOR_H
