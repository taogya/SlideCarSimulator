// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

    
#ifndef COMMANDSENDER_H
#define COMMANDSENDER_H
#include <stdint.h>
#include "TimerDrv.h"
#include "SlideCarCommand.pb.h"


typedef enum CommandSender_EventId
{
    CommandSender_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    CommandSender_EventId_TIMEOUT = 1
} CommandSender_EventId;

enum
{
    CommandSender_EventIdCount = 2
};

typedef enum CommandSender_StateId
{
    CommandSender_StateId_ROOT = 0,
    CommandSender_StateId_TICK = 1,
    CommandSender_StateId_WAIT = 2
} CommandSender_StateId;

enum
{
    CommandSender_StateIdCount = 3
};


// Generated state machine
// forward declaration
typedef struct CommandSender CommandSender;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct CommandSender_Vars
{
    SlideCarCommandType type;
    uint32_t steps;
    TimerDrvCallback timer_callback;
} CommandSender_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void CommandSender_ctor(CommandSender* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void CommandSender_start(CommandSender* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void CommandSender_dispatch_event(CommandSender* sm, CommandSender_EventId event_id);

// Thread safe.
char const * CommandSender_state_id_to_string(CommandSender_StateId id);

// Thread safe.
char const * CommandSender_event_id_to_string(CommandSender_EventId id);

// Generated state machine
struct CommandSender
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    CommandSender_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    CommandSender_Vars vars;
};

#endif // COMMANDSENDER_H
