// Autogenerated with StateSmith 0.19.0+b5719011215d41a81572ed347c02b22db5d1a48f.
// Algorithm: Balanced2. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

    
#ifndef BUTTON_H
#define BUTTON_H
#include <stdint.h>
#include "ButtonDrv.h"
#include "TimerDrv.h"


typedef enum Button_EventId
{
    Button_EventId_DO = 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
    Button_EventId_DETECTED = 1,
    Button_EventId_INTERRUPTED = 2,
    Button_EventId_NOT_DETECTED = 3,
    Button_EventId_TIMEOUT = 4
} Button_EventId;

enum
{
    Button_EventIdCount = 5
};

typedef enum Button_StateId
{
    Button_StateId_ROOT = 0,
    Button_StateId_IDLE = 1,
    Button_StateId_TICK = 2,
    Button_StateId_WAIT = 3
} Button_StateId;

enum
{
    Button_StateIdCount = 4
};


// Generated state machine
// forward declaration
typedef struct Button Button;

// State machine variables. Can be used for inputs, outputs, user variables...
typedef struct Button_Vars
{
    uint32_t button_state;
    uint32_t left_count;
    uint32_t right_count;
    uint32_t tick_count;
    ButtonDrvCallback button_callback;
    TimerDrvCallback timer_callback;
} Button_Vars;


// State machine constructor. Must be called before start or dispatch event functions. Not thread safe.
void Button_ctor(Button* sm);

// Starts the state machine. Must be called before dispatching events. Not thread safe.
void Button_start(Button* sm);

// Dispatches an event to the state machine. Not thread safe.
// Note! This function assumes that the `event_id` parameter is valid.
void Button_dispatch_event(Button* sm, Button_EventId event_id);

// Thread safe.
char const * Button_state_id_to_string(Button_StateId id);

// Thread safe.
char const * Button_event_id_to_string(Button_EventId id);

// Generated state machine
struct Button
{
    // Used internally by state machine. Feel free to inspect, but don't modify.
    Button_StateId state_id;
    
    // Variables. Can be used for inputs, outputs, user variables...
    Button_Vars vars;
};

#endif // BUTTON_H
